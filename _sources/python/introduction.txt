*******************************************
Introduction and setting up the environment
*******************************************

Python for speakers of other languages
======================================

For those who already know a programming language or two, an important part of learning a new language is finding out which parts of your knowledge will carry over and which won't. Rather than providing an exhaustive tutorial on syntax [#pythontutorial]_, we will point out some key ideas and traps for users used to other languages. (If you don't know another language well, don't worry! More details will follow in the next sections.)

-  If you're coming from a **C or Java-like background**, note that Python does not use curly braces to denote "blocks" of code (e.g. the body of a loop or a conditional). Instead, blocks are indented by four spaces, and Python detects the end of a block when you return to the "outer" level of indentation.

   For example, this C code::

      if (myinteger > 0) {
         handle_over_zero_case();
      }
      do_something_else();

   Would look like this in Python::

      if myinteger > 0:
          handle_over_zero_case()
      do_something_else()

-  Similarly, semicolons are unnecessary to end lines.
   (In fact, it is considered poor style to use semicolons in Python code, though it is not a syntax error.)

   \

-  If you're coming from an **IDL background**, be aware that there is no equivalent to the common ``proc_name, argument1, argument2`` syntax. (Function calls in Python will always look like ``function_name(argument1, argument2)``.)

   \

- Similarly, there are no ``begin`` and ``endif`` keywords. Blocks are introduced with a colon and indentation, and ended by returning to the previous indentation level. (See the example code above.)

\

-  When referring to an element of a sequence, the indices count from zero.
   (That is, the first element of ``mylist`` would be ``mylist[0]``.)

   \

- When working with image data (or any 2D arrays), indexing follows matrix conventions of row-column, rather than Cartesian (x, y). This means accessing an element of an array in row "y" and column "x" looks like ``myarray[y,x]`` (rather than ``myarray[x,y]``).

   \

-  Python is case sensitive. That is, a variable named ``varONE`` cannot be referred to as ``varone``. Language keywords like ``if``, ``for``, ``while``, etc. are always lowercase.

   \

-  Comments in code are useful to help you remember what is going on,
   but also so that others know what you are doing. In Python, comment text
   begins with the ``#`` symbol and goes to the end of the line.

   For example::

      # a comment

   ::

      do_something()  # a comment sharing a line

   ::

      # a multi
      # line
      # comment

   \

   Another way to effectively comment multiple lines is by rendering it a
   string mid text. This is not technically a comment, but Python won't
   know the difference. This is the standard for docstrings in functions, 
   or sometimes used for testing without chunks of code.

   For example::
    
      def do_something(param1, param2):
        """This function does something!
      
        Parameters
        ----------
        param1 : str
            Param1 is the first parameter.
    
        param2 : int
            Param2 is the second paramter.
        """
    
   ::

      do_something() # We'll do this thing.
      """
      At present we don't
      Run these lines -- see, we're testing!
      Plants, plants, plants, plants, plants.
      """
      do_something_else()

   \
    
-  The line continuation symbol ``\`` can be used to spread an expression
   out over multiple lines. There are constructs in Python that use parentheses,
   square brackets (``[]``), or curly braces (``{}``). Inside those, Python will
   wait for the closing symbol before assuming the end of the line.

Environment and Set Up
======================

Python packages and environments are managed with ``conda``, as described in :ref:`installing-conda`. Ensure you are in the ``conda`` environment you set up in :ref:`the computer setup module <installing-conda>` when you go through this training.

.. note::

   In this text, when discussing commands to be typed at a command prompt, ``$`` is a placeholder for your command prompt (which may be something like ``yourname@localhost $``). You don't need to type it, just the commands following it.

.. tip::

   Check which ``python`` you're using with this command::

      $ which python
      /Users/myusername/anaconda/envs/astroconda/bin/python

   You can also check the version of Python install with::

      $ python -V
      Python 3.6.3 :: Continuum Analytics, Inc.

Using Python interactively
--------------------------

Not every piece of Python code you write must be saved in a file. When using Python for data analysis, it is common to try out snippets of code interactively, examine their results, and iterate until you get the code the way you want it.

The most bare-bones way to use Python interactively is the **interactive interpreter** or **REPL** (Read-Evaluate-Print Loop). You start it by typing ``python`` in a terminal, which gives output like this::

   $ python
   Python 3.6.3 |Continuum Analytics, Inc.| (default, Jun 15 2016, 16:14:02)
   [GCC 4.2.1 Compatible Apple LLVM 4.2 (clang-425.0.28)] on darwin
   Type "help", "copyright", "credits" or "license" for more information.
   >>>

You can type any valid Python code at the ``>>>`` prompt. Exit with ``exit()``.

Heavy users of Python for interactive data analysis have come up with something better: **IPython**. It includes various niceties like syntax highlighting and some helpful `magic commands <http://ipython.readthedocs.io/en/stable/interactive/magics.html>`_.

Start it from the terminal with the ``ipython`` command::

   $ ipython
   Python 3.6.3 |Continuum Analytics, Inc.| (default, Jun 15 2016, 16:14:02)
   Type "copyright", "credits" or "license" for more information.

   IPython 6.1.0 -- An enhanced Interactive Python.
   ?         -> Introduction and overview of IPython's features.
   %quickref -> Quick reference.
   help      -> Python's own help system.
   object?   -> Details about 'object', use 'object??' for extra details.

   In [1]:

You can type any valid Python code at the ``In [#]`` prompt. One advantage of IPython is that besides Python code, you are also able to execute UNIX commands such as ``ls`` and ``cp`` without special syntax, or any UNIX shell command by including a ``!`` prefix at the beginning of a line. Exit with ``exit`` or ``exit()``.

The developers and users of IPython eventually came up with another interface, based on the successful Mathematica notebook concept. The IPython Notebook offers most of the same conveniences as IPython in the terminal, but additionally enables storing notes, outputs, and plots in a single file. The IPython Notebook was renamed to become the **Jupyter Notebook** in 2014.

Start it from the terminal with the ``jupyter notebook`` command. A process will open your web browser and point it to http://localhost:8888/, where a local web interface to the Jupyter Notebook is running.

Click on the "New" button above and to the right of the file listing, and choose a "Python 3" notebook to create. You then type your code in "cells", which can be multiple lines long. To execute a cell, use :kbd:`Shift-Enter`.

To close the notebook, first ensure you've saved your work. (From the "File" menu, choose "Save and checkpoint" and then "Close and halt".) Next, stop the web interface by typing :kbd:`Ctrl-C` in the terminal window to interrupt it and "y" to confirm you want to quit.

.. note::

   In this text, when discussing commands to be typed at a Python interactive interpreter prompt, ``>>>`` is a placeholder for your command prompt (which will look like ``>>>``, or ``In [#]:`` if you're using IPython). An ellipsis (``...``) indicates a continuation of the preceding block or expression. (Enter a blank line to conclude the block or expression.)

.. note::

   Exercises will appear in blue boxes like this one. Open the Jupyter Notebook in a folder where you will keep your training solutions, and make a new notebook file for your exercise solutions. Save it when you are done, and submit the ``.ipynb`` file to the person conducting the training. (Some later exercises ask you to make script files, but most exercises can be completed in the Notebook.)

   Sometimes, it can be helpful to have an IPython session open as well for experimentation and trying out examples in the text. (That saves you from having to clean up experimentation cells in your notebook when you're done.)


.. rubric:: Footnotes

.. [#pythontutorial] An extensive Python tutorial is available from the Python developers themselves: https://docs.python.org/3/tutorial/introduction.html.
