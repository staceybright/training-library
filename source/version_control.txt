*************************
Version Control with git
*************************

Version control systems keep track of changes to code, documents, and other files as you work. While this document will discuss one particular version control system, ``git`` [#gitproject]_ , the *concept* of version control shows up everywhere from iCloud to Wikipedia to NASA project management. That's because the simple idea of tracking changes is very powerful, giving authors and programmers great flexibility in their work.

What can version control do for me?
====================================

It might be instructive to motivate these exercises with some examples. After completing this training, you will know how to do all of these for any given ``git`` repository. Here are a few examples of things version control can do for you.

1. **Figuring out who to ask** -- Look at the *history* of a particular file to find out who to ask about a particular section and when it was written
2. **Collaborate without clobbering** -- Edit a file someone else is also working on, without overwriting their changes
3. **Work on two things at once** -- Explore adding a major new feature, but keep those changes separate from your routine work
4. **Undo exactly what you changed** -- Sometimes things stop working and you don't know what you changed. If you track changes in a version control system, you can see exactly what changed.
5. **Copy, change, contribute back** -- Modify open-source software and share your changes with the wider community

Getting started with ``git``
==============================

First, make sure ``git`` is installed: open a Terminal window, type ``git``, and hit :kbd:`Enter`. (If you see ``command not found``, you need to make sure git is installed and available in your Terminal.) This will print out a somewhat intimidating list of all the things you can do with git, most of which are exposed through "sub-commands". Think of it like this: the first two "words" when you type a git command are the real name of the command, and anything after is interpreted as modifiers to that command.

For example, ``git add ./test`` means "add files in the test directory to be committed" and ``git init ./test`` means "initialize a repository in the test directory". On the other hand, if you typed ``git ./test``... ::

   $ git ./test
   git: './test' is not a git command. See 'git --help'.

Every sub-command has thorough documentation accessible through ``git nameofcommand --help``. (You can scroll the help pagewith the arrow keys and exit with :kbd:`q`.)

The first thing we want to do is make a workspace for these exercises. Git commands operate on a **repository**, which is a folder on your computer that contains both the files you want to track and the internal git bookkeeping data #[gitdirectory]_ .

.. admonition:: Exercise: Creating a new repository

   Create a new git repository in a folder called ``git_training`` using the ``git init`` commmand. (Skim ``git init --help`` to figure out the syntax.)


..
   TODO list
   add, commit, revert
   branches
   merging
   merging with conflicts

.. _getting_started_github:

Getting started with GitHub
---------------------------

If you're new to GitHub, you'll need to register for a free account and set up your computer to authenticate you with GitHub when using git.

1. **Make a free GitHub account**

   The registration form is on the `GitHub homepage <https://github.com/>`_

2. **Generate an SSH key**

   Without getting too detailed, an SSH key is a bit like a username and password combined. GitHub needs your SSH key to know who you are when you want to make changes to shared documents. Usually, you'd want a *passphrase* on top of that, but for this case it's unnecessary so you can just hit :kbd:`Enter` when prompted. [#passphrase]_

   Open a new terminal and type the command shown below. (Remember to put in your STScI email!) ::

       $ ssh-keygen -t rsa -C "your_email@example.com"
       Generating public/private rsa key pair.
       Enter file in which to save the key (/Users/you/.ssh/id_rsa): [Press enter]
       Enter passphrase (empty for no passphrase): [Press enter]
       Enter same passphrase again: [Press enter]
       Your identification has been saved in /Users/you/.ssh/id_rsa.
       Your public key has been saved in /Users/you/.ssh/id_rsa.pub.
       The key fingerprint is:
       01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@example.com
       The key's randomart image is:
       +--[ RSA 2048]----+
       |       o+ oo=..  |
       |       . ..+ o . |
       |        .   o .  |
       |       .   o +   |
       |        S   = =  |
       |             * . |
       |              . .|
       |               = |
       |            E.+o+|
       +-----------------+

3. **Tell GitHub about your new SSH key**

   First, copy the contents of ``~/.ssh/id_rsa.pub`` to your clipboard using this command::

   $ pbcopy < ~/.ssh/id_rsa.pub  # (you could do this by hand with a text editor too)

   Now you want to go to https://github.com/settings/ssh and follow these instructions to `add your SSH key to your account <https://help.github.com/articles/generating-ssh-keys/#step-3-add-your-ssh-key-to-your-account>`_.

4. **Verify that your computer can talk to GitHub**

   ::

      $ ssh -T git@github.com

   If you're prompted with ``Are you sure you want to continue connecting (yes/no)?``, type "yes" and hit :kbd:`Enter`. You should see a message indicating you have successfully authenticated.

**You're all set!** Now when you make your improvements, your computer will be set up to let you share them on GitHub.

.. rubric:: Footnotes

.. [#gitproject] `git <http://git-scm.com/>`_ is free and open source software developed by the creator of Linux (Linus Torvalds) and many others. He once said that "git" (British English for "an unpleasant person") was a good name for a project of his, as he names all of his projects after himself.
.. [#gitdirectory] The vast majority of git repositories you will come across will have a hidden subdirectory named ``.git``, as well as the "working copy" of any files you're editing. To be nit-picky, the ``.git`` directory is the actual *repository*. (For example, you can delete the files of the working copy completely and get a fresh version as long as the ``.git`` directory is intact.)
.. [#passphrase] Passphrases ensure that someone with physical access to your computer still cannot impersonate you online with your SSH key. The down side is that you have to supply a passphrase each time you use the key, or else configure the SSH agent (which can result in additional frustration).

   Since Institute laptops have full-disk encryption, the risk of a malicious actor coming into your office to steal your encryption keys while you're away from your desk is low, and the keys aren't protecting anything more sensitive than training documents, you can forgo the passphrase in this case. If your situation is different, you should absolutely generate a new key with a passphrase.