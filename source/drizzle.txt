****************
Using DrizzlePac
****************

*Authors: Varun Bajaj, Roberto Avila*

Version 1.0 February 2016

DrizzlePac is a python package used for spatially aligning and combining Hubble Space Telescope (HST) image data.  It was created to replace and improve upon the functionality of MultiDrizzle.  The main workhorse of DrizzlePac is the task AstroDrizzle.  This task provides many improvements to HST images, creating cleaner  images and allowing for much more accurate photometry.  In fact, DrizzlePac/the AstroDrizzle algorithms have been used to create many of your favorite famous HST images!

This intention of this document is to give a basic overview of the DrizzlePac workflow for HST images.  Over the course of this training, you will find a number of exercises.  Please save any plots/meaningful output so you trainers may review your work.  For more information on AstroDrizzle/DrizzlePac consult the `DrizzlePac webpage <http://drizzlepac.stsci.edu/>`_ and the many links presented there.

Introduction
============
The original Drizzle algorithm was created to combine the many exposures used to create the Hubble Ultra Deep Field.  Since then the software has gone through many iterations to become DrizzlePac, which offers a wide variety of tools to correct, align, and combine images.

Until now, you may have only looked at image data processed solely by the calibration pipelines (calwf3, calacs).  AstroDrizzle takes the individual products of these pipelines and makes a final, improved product that may have corrected several things including but not limited to:

    * Geometric distortion
    * Bad Pixels
    * Cosmic rays
    * Blobs
    * Chip gaps
Drizzle is able to fill in pixels affected by these artifacts by replacing them with other 'good' pixels in your stack.

Geometric Distortion
--------------------
To correct for the spherical aberration of Hubble's primary mirror, corrective optics were required to produce usable data.  In the current generation of imagers, this correction causes distortion in the cameras' field of view, as the detectors are tilted relative to the focal plane.  This, in turn, creates a slight pixel area gradient across the detectors as well as a skewed, non-rectangular field of view.  In this state, astrometric alignments/measurements are near impossible.  AstroDrizzle is able to correct for this using distortion correction reference files provided by the instrument teams at STScI.

.. image:: figures/drizzle/Visit01-icb701oqq_flt.jpg
    :scale: 8 %
    :alt: first_exposure
.. image:: figures/drizzle/ds9.jpeg
    :scale: 8 %
    :alt: second_exposure

Detector Artifacts
---------------------------------
The detectors aboard both ACS and WFC3 feature a small, but non-negligible, number of pixels classified as 'bad'.  These may be warm/hot pixels, unstable pixels, unbonded pixels, or pixels that are entirely dead.  In the case of WFC3/IR blemishes with lower than expected sensitivity ('blobs') are created by issues elsewhere in the optical path.  These pixels are generally detrimental to obtaining good, photometrically accurate images. In addition, cosmic rays are constantly bombarding the detectors.  Due to the high energies of these particles HST images show bright speckles/streaks (which do not correspond to any real source), especially in images with longer exposure times.  Instrument channels featuring multiple detector chips, such as WFC3/UVIS and ACS/WFC, have gaps in-between the chips (chip gaps).  These gaps are the width of several pixels so single exposures from these instrument channels are bisected by a gap in which no data is recorded (as there are no pixels there).

To fix these issues, dithered exposures are taken in flight and combined later by AstroDrizzle.

Dithering
---------
Dithering is the repointing of the telescope within a single visit to shift targets onto different pixels from exposure to exposure (an example showing dithered exposures of NGC-1856 is provided below).

.. image:: figures/drizzle/Visit01-icb701oqq_flt.jpg
    :scale: 8 %
    :alt: first_exposure
.. image:: figures/drizzle/Visit01-icb701p0q_flt.jpg
    :scale: 8 %
    :alt: second_exposure

This process moves sources that may have been on problematic pixels onto pixels unaffected by detector artifacts.  Notice in the example above how the target moves across the chip gap, so the regions of the target placed in the gap in the first exposure can be recorded in the following exposure.  Bad pixels in a single exposure are rejected and filled in with good pixels from other exposures when multiple exposures are ultimately combined in the Drizzle process.

In addition, dithering subpixel distances can allow for better sampling of the point spread function (PSF).  This PSF subsampling can be used to achieve a higher resolution in the final Drizzled image.


Drizzle Process
---------------
The actual process used to 'drizzle' and image consists of several steps.  Roughly, they are:

0. Alignment of input images                        (TweakReg)
1. Create bad pixel mask    (AstroDrizzle)
#. Sky subtraction (AstroDrizzle)
#. Drizzle single undistorted images (AstroDrizzle)
#. Create median image (AstroDrizzle)
#. Blot median image back to distorted frame (AstroDrizzle)
#. Create cosmic ray mask (AstroDrizzle)
#. **Create final undistorted, combined image** (AstroDrizzle)
#. PROFIT!!!! (Science/pretty pictures)

Before any drizzling is actually done, images must be properly aligned.  The alignment process uses a module in DrizzlePac called TweakReg.

Steps one through seven are the main steps of the AstroDrizzle process.  Steps one through three remove distortion and reject any permanently 'bad' pixels (dead pixels, blobs, etc) whereas steps four through six flag and reject cosmic rays.  Step 7 creates the final optimized drizzled product which can be used for step 8 at your leisure.

Alignment using TweakReg
=========

Images taken within the same visit are usually aligned (registered) to each other and often do not need to be registered.  However, uncertainties in the guide star catalog introduce errors in the pointing of the telescope, so images taken in separate visits should not be assumed to be aligned.  An example of misaligned images is shown below:

.. image:: figures/drizzle/misaligned_source.png
    :scale: 75 %
    :alt: misaligned_image

The first image (shown in red)is clearly offset from the second (shown in cyan) by nearly 10 pixels (roughly an arcsecond).  In general an alignment within 0.1 pixels is considered good.

Pixel positions are mapped to positions on the sky (RA/Dec) via the world coordinate system (WCS).  Naturally, the positions of sources **should** have the same celestial coordinates between exposures (this obviously isn't always the case for objects with large proper motions).  Misaligned images like the example above show the same sources having different celestial positions- an error that must be rectified before running AstroDrizzle.  To do this, the WCS of the input images must be 'tweaked' so the positions of the sources match across all of the images.

The zeroth step in the drizzle process is making sure the images are aligned.  This remainder of this section will guide you through aligning images using TweakReg.  The example images we use feature the open cluster NGC 6791.

.. admonition:: Exercise
   :class: note

   Retrieve all the WFC3 ``flt`` images (if ``flc`` images are available, retrieve those instead) of NGC 6791 in program 12379 from MAST in filters F606W and F502N.  Refer to your archive training (or your trainer) for help if needed.

================== ======== ========== ====== =====
Rootname           Targname Date-obs   Filter Exptime
================== ======== ========== ====== =====
ibnh01z1q_flt.fits NGC-6791 2010-11-17 F606W  30.0
ibnh01z2q_flt.fits NGC-6791 2010-11-17 F606W  360.0
ibnh01zjq_flt.fits NGC-6791 2010-11-18 F606W  360.0
ibnh01zmq_flt.fits NGC-6791 2010-11-18 F606W  30.0
ibnh01zoq_flt.fits NGC-6791 2010-11-18 F606W  30.0
ibnh01zpq_flt.fits NGC-6791 2010-11-18 F606W  30.0
ibnh09a5q_flt.fits NGC-6791 2011-03-08 F606W  348.0
ibnh09a8q_flt.fits NGC-6791 2011-03-08 F606W  30.0
ibnh01z4q_flt.fits NGC-6791 2010-11-17 F502N  60.0
ibnh01z7q_flt.fits NGC-6791 2010-11-17 F502N  60.0
ibnh01zfq_flt.fits NGC-6791 2010-11-18 F502N  420.0
ibnh01zhq_flt.fits NGC-6791 2010-11-18 F502N  420.0
ibnh09adq_flt.fits NGC-6791 2011-03-09 F502N  400.0
ibnh09agq_flt.fits NGC-6791 2011-03-09 F502N  60.0
================== ======== ========== ====== =====

Open some of the images in ds9 and press ``Match -> Frame -> WCS``.  Notice that images from the Visit 01 (``ibnh01*flt.fits``) are well aligned to one another, but images from the Visit 09 (``ibnh09*flt.fits``) are not aligned with Visit 01.


TweakReg
--------
The alignment process via TweakReg consists of a few steps:

1. Make a catalog of point source pixel positions for each input image via a source finding algorithm similar to IRAF's ``DAOFIND`` task
#. Convert the pixel position catalogs to sky position catalogs (accounting for geometric distortion)
#. Find common source positions between catalogs
#. Calculate the shifts, rotation and scale needed to align sky positions of sources in the input images
#. Update the input image headers with the newly calculated WCS information

You can run TweakReg through Pyraf/Python, though only Python DrizzlePac interfaces will be featured in this document.  However, before ou can actually run TweakReg, the distortion information must be put into the header.  Enter the ``SSBX`` environment and open a python shell of your choice (ipython/ipython notebook will likely work the best) ::

>>> import glob
>>> from stwcs import updatewcs # module to update WCS with distortion solution
>>> for flt in glob.glob('*flt.fits'): updatewcs.updatewcs(flt)

TweakReg can now be run either through a python command or through the ``teal`` interface: ::

>>> from stsci.tools import teal
>>> from drizzlepac import tweakreg
>>> teal.teal('tweakreg')
