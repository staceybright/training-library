*************************
Setting Up Your Computer
*************************

*Authors: Joseph Long, Matthew Bourque, Sara Ogaz, Amber Armstrong, Michael Dulude, and Tiffany Borders*

The Institute provides you a computer when you are hired, and sets it up with a core set of software. (Some new hires get a loaner computer while a new machine is ordered and prepared for them.) They'll buy you a new one every three years, if you're good. Even though ITSD is responsible for installing important things like Office and antivirus software for all, it's up to each RIA to set their system up the way they want. For science-related uses, most new Institute machines are Macs, so this guide will assume that's what you have.

You should have a computer, an ActiveDirectory (AD) username, and a password from ITSD. Let's get started.

Configuring your email
=======================

Space Telescope uses Microsoft Exchange for email. Web-based access is available at https://mail.stsci.edu/. For daily use, you should set up a mail client like Outlook on your computer.

ITSD maintains some `guides for common mail clients <http://www.stsci.edu/institute/itsd/collaboration/exchange/clients>`_.

Adding a printer
=================

Choose a printer near your office from `this list of printers <http://www.stsci.edu/institute/itsd/hardware/printers/printerlocs/printerlocations>`_. There are `instructions for printer setup <http://www.stsci.edu/institute/itsd/hardware/printers>`_ for different operating systems. The one you want is "Adding a Printer in Mac OS X".

Verify network mounts
======================

New computers set up by ITSD automatically connect certain folders to servers on the Institute network. These are called "Central Storage", and you will use them to exchange large files with coworkers and to make files from your personal machine available on the back-room servers.

Open a terminal and check that you can list the contents of the ``/grp/hst`` and ``/user`` directories, as shown::

    $ ls /grp/hst
    HST_Arch_Proj acs_testing   etc           nicmos        tac           wfc3c         wfc3i
    OTA           adrizzle      etcrlbkup     prd           telemetry     wfc3d         wfc3j
    acs           cdbs          fgs           pyetc         usersupport   wfc3e         wfc3k
    acs2          cos           frc           ssb           wasapsb       wfc3f         wfc3l
    acs3          cos2          frontier1     stis          wfc3a         wfc3g         wfpc2
    acs4          cos3          frontier2     synphot       wfc3b         wfc3h

(If, instead, you see something like this... ::

    $ ls /grp/hst
    ls: /grp/hst: No such file or directory

... then you need to talk to ITSD.)

Setting up your own Central Storage directory
==============================================

Users can store files under their username at ``/user/myusername``. This is useful for sharing large files with your colleagues. In fact, you'll be using your Central Storage directory to send your training exercises to your trainers later on.

Send an email to the STScI *internal* helpdesk at support@stsci.edu, and ask them to make you a Central Storage directory. [#externalhelpdesk]_

While they set this up for you, if you're unfamiliar with UNIX file permissions, now is a good time to review them.

While at STScI, you may use proprietary science data in your analyses that should not be shared outside your team. Your Central Store directory is, by default, readable by other users in the institute. This, believe it or not, is not a mistake! This choice makes it easy to use to share large files with your colleagues, but must be kept in mind when handling sensitive data.

If you have data you don't wish others to see, you must be sure to set the permissions appropriately on the directory with the data. Files and folders can be assigned read, write, and execute permissions that apply to the owning user, owning group, and others. (The owning user and group are set when the file or directory is created; use ``ls -l FILE_OR_DIRECTORY_NAME`` to see what they're set to: owning user in the 3rd column, owning group in the 4th.)

The command to change permissions is ``chmod``, and it takes the form of ``chmod [-R] PERMS FILE_OR_DIRECTORY``. When you wish to apply new permissions to a directory and all its contents, use ``-R`` (recursive). The ``PERMS`` string can be built up from the options in the table below.

+----------------+-------+-------+---------+
|                | Read  | Write | Execute |
+================+=======+=======+=========+
|           User | u=r   | u=w   | u=x     |
+----------------+-------+-------+---------+
|          Group | g=r   | g=w   | g=x     |
+----------------+-------+-------+---------+
|  Other / World | o=r   | o=w   | o=x     |
+----------------+-------+-------+---------+

For example, if you want a file to be readable and writable by yourself, only readable by people in your group, and completely inaccessible others, you would use ``chmod u=rw,g=r,o= myfile.txt``. See how we used ``o=`` to **clear** the permissions. Omitting ``o=`` from the list would tell chmod to leave whatever permissions were already there [#umask]_.

**Note:** the "execute" permission should only be set for programs (and scripts) with one major exception: for **directories**, the "execute" permission means "can use files from"... so even if you cannot read the list of files in the directory, if you know the name of a particular file with world-readable access and the "execute" permission is available to you on the directory, you can still open the file. This is kind of subtle, so check out `this StackOverflow thread <http://unix.stackexchange.com/questions/21251/how-do-directory-permissions-in-linux-work>`_ for additional background.

.. admonition:: Exercise
   :class: note

   Make a subdirectory of your ``/user/myusername`` directory called ``private`` and make it usable only by you.

   Use ``ls -l`` to verify the permissions and ownership are what you expect. If you're not sure, ask your trainer to try and read a file in your new private directory!

Setting up a text editor
========================

Some new RIAs have a preference for a text editor for programming like ``vim`` or ``emacs``. For everyone else, TextWrangler is installed on your Institute machine already, and is a good starting point.

.. figure:: figures/computer_setup/textwrangler_icon.png
   :alt: The TextWrangler icon.

   The TextWrangler icon.

The first step is to open up TextWrangler by double-clicking the icon in your Applications folder. Once you've done that, select the "Install Command Line Tools..." option from the main menu as shown.

.. figure:: figures/computer_setup/textwrangler_install_command_line_tools_menu.png
   :alt: The menu showing the "Install Command Line Tools..." option

   The menu showing the "Install Command Line Tools..." option.

Choose to install the command line tools, as shown. You will be prompted for your password a couple of times.

.. figure:: figures/computer_setup/textwrangler_install_command_line_tools_prompt.png
   :alt: Dialog box asking you to confirm that you want to install the command line tools.

   Dialog box asking you to confirm that you want to install the command line tools.

Once they've installed, you should see a window like this one:

.. figure:: figures/computer_setup/textwrangler_install_command_line_tools_success.png
   :alt: Dialog box for successful installation.

   Dialog box for successful installation.

These steps make a new command, ``edit``, available in your terminal.

Quit TextWrangler, then open a new terminal window and make sure TextWrangler appears when you use the edit command (e.g. ``edit myfile.txt``).

.. _computer_setup_environment:

Configuring STScI-specific environment variables
=================================================

A lot of tools developed within STScI assume the existence of certain environment variables that point to data on servers within the Institute. The default shell for new computers at the Institute is ``tcsh``, however you will want to change this to ``bash``. To do so, you have to do a couple things.

In the terminal, change your shell with the following command::

    chsh -s /bin/bash


Close your terminal, and open a new one to finalize this change. 

Now, you need to set the environment variables in the file ``.bashrc`` in your home directory. This file probably does not exist so you will have to create it.

Open (or create) ``.bashrc`` with the following command::

   edit ~/.bashrc

.. tip::

   Files starting with a ``.`` are hidden in the Finder, so it's often easier to open them from the command line.

Here is an example ``.bashrc`` that you can copy and paste into yours::

    # Paths and stuff for accessing CDBS stuff
    # For WFC3
    export iref="/grp/hst/cdbs/iref/"

    # For ACS
    export jref="/grp/hst/cdbs/jref/"
    export jtab="/grp/hst/cdbs/jtab/"

    # For COS
    export lref="/grp/hst/cdbs/lref/"

    # For STIS
    export oref="/grp/hst/cdbs/oref/"

    # Set a default editor
    # If you prefer another editor, change the export EDITOR and VISUAL lines accordingly.
    export EDITOR=edit
    export VISUAL=edit

    # Pysynphot
    export PYSYN_CDBS="/grp/hst/cdbs/"

As you may have guessed, setting variables in ``bash`` takes the form of ``export NAMEOFVAR="/value/for/var"``. You should set all of these variables, even if you are not on one of the listed instrument teams, as later training exercises will depend on them being set.

To set these changes, save the file and typing the following into the command line::

    source ~/.bashrc

To check that your changes have taken effect, open a **new terminal window** and type ``echo $oref``. You should see the value for ``oref`` from above printed out in the terminal.

.. tip::

   If you prefer another editor, change the ``export EDITOR`` and ``VISUAL`` lines accordingly.

.. _git_configuration:

Configure the git version control tool
======================================

We will use git in the :doc:`version_control` module later on, but let's take the opportunity now to tell it your name and email address. These will be used by git to identify who changed particular versions of the code. Run the commands below, updating them with your own name and work email address::

   git config --global user.name "Name of RIA"
   git config --global user.email "nria@stsci.edu"

It's also a good idea to tell it about your preferred text editor (here we use ``edit``, as an alias to TextWrangler), which git will sometimes open for you when it wants you to describe your changes. ::

   git config --global core.editor "edit"

.. _computer_setup_ureka:

Installing Ureka for internal users
====================================

.. warning::

    This section is only for users still using/who have been asked specifically to use SSB. If you are a new user, please skip down to the next section.
    
The Institute's Science Software Branch distributes a package containing all of the essentials for scientific computing for astronomy. The version for outside users is called Ureka (you may have it on your home computer), but we use a special version of Ureka internally. Like Ureka, this package includes all the usual suspects: Python, IRAF, PyRAF, IPython + the IPython Notebook, NumPy, SciPy, matplotlib, ds9, etc. For more information, consult the `complete list <http://ssb.stsci.edu/ssbx/docs/components.html>`_ (or the `SSBREL complete list <http://ssb.stsci.edu/ssbrel/docs/components.html>`_).

There are three release channels of the SSB IRAF + Python distribution: SSBDEV, SSBX, and SSBREL. SSBDEV is updated nightly, SSBX weekly, and SSBREL infrequently as it is the most stable option.

Follow the `directions for using SSBREL, SSBX, and SSBDEV at STScI <http://ssb.stsci.edu/internal_ssb_software_installations.shtml>`_ to install the ``sync_ssb`` utility.

After going through the steps in the downloaded installer, the program ``/Users/Shared/sync_ssb`` will be available. Run that command in the terminal to perform the initial sync and complete the installation.

.. note::

    Running ``sync_ssb`` may take up to 45 minutes the first time you do it. To see useful output as it runs, use the command ``/Users/Shared/sync_ssb -v``.

When that completes, open a *new* terminal window and type ``ssbx`` to activate the SSBX environment. (SSBDEV and SSBREL work similarly.) You must choose an environment to activate each time you open a new Terminal window.

.. note::

    If you are a laptop user, make a habit of running ``/Users/Shared/sync_ssb`` while you are connected to the Institute network, at least once a week. Desktops will automatically sync nightly at 6:30 AM, unless the computer is off.
    
Installing Conda
================

The Institute's Science Software Branch currently distributes a package that contains some essentials for scientific computing for astronomy, however, this package is slowly being phased out. As a result, we suggest that instead you install Miniconda, and set up your own environments with the necessary packages. One of the main reasons we recommend this is because of Python 2.7 and Python 3 and the differences between them. We discuss this further in the Python section of the training, however since we are working with both Python 2.7 and Python 3 code at the Institute, we cannot completely move to Python 3 and being able to work within both is beneficial.

Getting starting, we must install Conda from bash. When installing Conda, you can choose to install Anaconda or Miniconda. While Anaconda can be more convenient, Miniconda allows you to create specific environments according to your needs. Specifically, we are installing Miniconda that we can easily switch between Python versions.

Download Miniconda `here <http://conda.pydata.org/miniconda.html>`_ and make sure to choose Python 2.7, 64 bit for Mac OS X. This will ensure that your root environment will run Python 2.7. 

Now, in your terminal, type::

    bash Miniconda-latest-MacOSX-x86_64.sh
    
Follow the instructions as prompted. Accepting the defaults should be sufficient at this time. Now Conda is installed! 

If you want a detailed introduction on how to use Conda, you can check out `<http://conda.pydata.org/docs/test-drive.html>`_ which will guide you step-by-step through some of what Conda can do. If instead, you are on board for a quick environment setup you can follow along here.

Now, we can check our environments and add some new ones. First, to see the list of environments::
    
    conda info --envs

You should only see your root environment. For reasons that are a little confusing, we don't want to use our ``root`` environment to do all our works so let's create a new environment that will be our main environment that runs Python 2.7.  

Since we installed Miniconda, we get to install all our own programs and packages. Most of what we need can be installed by simply installing the STScI package in the following way:: 
    
    conda create --name python2 -c http://ssb.stsci.edu/conda-dev/ stsci

I call this environment ``python2`` so that I always know which Python version I am using. You can call this environment whatever you want. We have added the STScI package to our python2 environment to start, which will give you all your usually Python friends (NumPy, Astropy, matplotlib, etc.) and also make sure that you have iPython and iPython Notebook. Now we enter this environment and then check to see exactly which packages have been added.::

    source activate python2
    conda list
    
We already know we are using Python 2.7, but just in case, you can check by typing::

    python --version
    
Now, since we are running Python 2.7 in our python2 environment, let's add a new environment that is generally the same, but uses Python 3. 

.. note::

    It's impractical to make all your environments the same so it's best to just pick one that you will use more often and use other environments for specific tasks.
    
First we return to root::

    source deactivate

You can check to see where you are by typing::

    conda info --envs
    
And seeing which environment the asterisk is next to. 
    
To add your Python 3 environment::

    conda create --name python3 python=3 -c http://ssb.stsci.edu/conda-dev/ stsci
    
I have named my new environment ``python3`` but, again, you can name yours whatever you want. 

Now that you have several environments, let's check them all out::

    conda info --envs
    
Lastly, we need to know how to add more packages (and delete them) in the future. The following is how you can do this from ``root`` or a different environment. If you are in the environment you are changing, you do not need the ``--name [name of package`` part. 
    
    conda install --name [name of environment] [name of package]
    conda remove --name [name of environment] [name of package]

If you decide that you don't like/need an environment, you can delete it!::

    conda remove --name [name of environment] --all

.. note::

    For more information on dealing with Conda and playing with environments, check out the 'Conda page <http://conda.pydata.org/docs/index.html>`_ .

Verify IDL is installed
========================

IDL should be pre-installed on new Institute machines. To check, open a terminal window and type ``idl``. You should see something like this::

   $ idl
   IDL Version 8.2.3, Mac OS X (darwin x86_64 m64). (c) 2013, Exelis Visual Information Solutions, Inc.
   Installation number: 90853.
   Licensed for use by: Space Telescope

   IDL>

If not, contact computer support.

Subscribe to mailing lists
===========================

Subscribe to ``ins_staff``, ``ins_aura``, ``ins_riab``, ``sci_tech``, and ``tips_announce`` through the Outlook Web Access interface at http://mail.stsci.edu/. Log in with your AD username and password. The way to subscribe to lists is well hidden; you must log in, choose "Options", then "See all options", select "Groups" from the sidebar, click "Join"  under "Public Groups I Belong To". In the window that pops open, search for the mailing list name and click "Join".

If you will be working on JWST or WFIRST, ask your team lead if you should sign up for ``jwst_all``, ``wfirst_all``, or another appropriate list.

The lists ``pylunch``, ``python-interested`` and ``macx_users`` can also be subscribed to in the same way. ITSD also provides `more information on Exchange <http://www.stsci.edu/institute/itsd/collaboration/exchange/exchangeLists>`_, if you're interested.

Make sure you can log in to Cisco Jabber
=========================================

Cisco Jabber should already be installed on your machine. (Contact ITSD if it's not.) Open the Cisco Jabber application and sign in with your AD username and password. Cisco Jabber connects with your calendar and phone, and will tell you if the person you're trying to message is in a meeting or does not want to be disturbed. You can also set it up to receive calls through your computer (for example, for teleworking).

ITSD maintains a guide with more information here: http://www.stsci.edu/institute/itsd/phone/jabber

Log in to the Confluence wiki
==============================

Log in to the Confluence wiki at https://confluence.stsci.edu/ using your AD credentials. Some important links to bookmark are:

* the `RIA branch wiki page <https://confluence.stsci.edu/pages/viewpage.action?pageId=32015091>`_ 
* the `RIA training hub <https://confluence.stsci.edu/display/INSRIA/RIA+training>`_
* the training page for your hiring group (click "RIA training" in the sidebar to expand the list)

Log in to a server
==================

The Institute has a whole herd of (mostly) Linux servers sitting in the server room downstairs. If you have a long-running task that you don't want to interrupt by taking your laptop home or rebooting your desktop, you should use a back-room server to run your analysis.

The command to remotely connect to a server is ``ssh SERVERNAME`` (e.g. ``ssh science1``). It will attempt to log you in with your current username and prompt you for your password. This is the same password you use to unlock your computer.

Any commands you run in an ssh session will execute on the server, not on your personal computer. This means any data you need should be copied to a Central Store directory so that the server can see it.

The ``screen`` utility
----------------------

One tool that makes working with back-room servers way more flexible is ``screen``. The ``screen`` utility lets you **detach** from a running session, go away (shut down your computer, disconnect, whatever), and then **reattach** to it later.

Here's a possible scenario: Jane wants to leave on Friday, but needs to run her ``calibrate_everything.py`` script that takes 12 hours to complete. First, she connects to a server with ``ssh``::

   janecomputer:~ janeuser$ ssh science1
   The authenticity of host 'science1 (130.167.200.161)' can't be established.
   RSA key fingerprint is 5e:21:0f:02:d9:23:16:7c:a8:28:a7:1b:c3:60:2f:81.
   Are you sure you want to continue connecting (yes/no)? yes
   Warning: Permanently added 'science1,130.167.200.161' (RSA) to the list of known hosts.
   Password:

      ****************************************************************************
      * This US Government system is for authorized users only. By accessing   *
      * this system you are consenting to complete monitoring with no            *
      * expectation of privacy. Unauthorized access or use may subject you to    *
      * disciplinary action and criminal prosecution                             *
      ****************************************************************************

   science1>

Then she starts a ``screen`` session and gives it the name ``mylongjob``::

   science1> screen -S mylongjob

The terminal window clears and the prompt is redisplayed at the top. She changes to the appropriate directory and runs her script::

   science1> ssbx
   science1> python calibrate_everything.py
   Working...

While it's running, she uses a magic key combination to detach the screen session: :kbd:`Ctrl-A` and then :kbd:`d`. The script output disappears and she's left with::

   science1> screen
   [detached]
   science1>

On Monday, she connects to ``science1`` via ``ssh`` as before, but she can't remember what she named the screen session so she runs::

   science1> screen -ls
   There are screens on:
       28724.mylongjob    (Detached)
   1 Socket in /var/run/screen/S-janeuser

Then she re-attaches to the screen session with::

   science1> screen -r mylongjob

which clears the current terminal output and shows her the tail end of her script's output::

   science1> python calibrate_everything.py
   Working...
   Calibrating Hubble... DONE
   Calibrating JWST... DONE
   Calibrating WFIRST... DONE
   science1>

Note that there's nothing special about the command finishing before she re-attached. She could have just as easily checked in on it while it was in progress over the weekend, but she was busy having fun. Since everything's done, she decides that instead of detaching again, she will just exit ``screen``::

   science1> exit
   [screen is terminating]
   science1>

If she didn't ``exit``, that session would remain active (and she could reattach to it later).

.. admonition:: Exercise
   :class: note

   Log into one of the servers named below and start a ``screen`` session. Detach from it, close your terminal, and make sure you can reconnect and reattach to it successfully.

   +------------------+----------------------------+
   | Server hostname  | Use                        |
   +==================+============================+
   | plhstins1        | INS HST functional work    |
   +------------------+----------------------------+
   | plhstins2        | INS HST functional work    |
   +------------------+----------------------------+
   | science1         | Science / research use     |
   +------------------+----------------------------+
   | science3         | Science / research use     |
   +------------------+----------------------------+
   | science4         | Science / research use     |
   +------------------+----------------------------+
   | science5         | Science / research use     |
   +------------------+----------------------------+
   | science6         | Science / research use     |
   +------------------+----------------------------+
   | plscigpu1        | GPU computing              |
   +------------------+----------------------------+
   | plscigpu2        | GPU computing              |
   +------------------+----------------------------+

On to the training exercises!
================================

The next chapters explain useful tools with exercises interspered with the text. Save the results of your exercises as you go; you will submit them to your trainer once you've completed the section. If you get stuck, you can always ask your trainer for help!

Wondering who your trainer is for a particular section? Check the `Confluence wiki page <https://confluence.stsci.edu/display/INSRIA/RIA+training>`_ for your training group (find your training group in the sidebar, after expanding the "RIA training" category). Other current RIAs have also done this training, so they're a good resource for quick questions if your trainer is busy.

Without further ado, it's time to learn about MAST (a.k.a. the Archive).

(If you're following along on paper, visit https://confluence.stsci.edu/display/INSRIA/RIA+training and choose the link for MAST archive training.)

Additional resources
=====================

* The Institute maintains a list of approved software, which you should consult if you need something else for your machine: http://www.stsci.edu/institute/itsd/software

.. rubric:: Footnotes

.. [#externalhelpdesk] There's an *external* helpdesk too, help@stsci.edu. For IT issues, though, you want the internal one. The external one is for astronomers to ask questions about things like the archive, SSB software, data characteristics, and the like.
.. [#umask] Files are created with a default set of permissions set by your "umask", which will most likely make them world-readable by default. See `this Wikipedia article <https://en.wikipedia.org/wiki/Umask>`_ if you're really curious.
