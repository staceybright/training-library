*************************
Setting Up Your Computer
*************************

*Authors: Keira Brooks, Joseph Long, Matthew Bourque, Sara Ogaz, Dave Borncamp, Amber Armstrong, Michael Dulude, and Tiffany Borders*

The Institute provides you a computer when you are hired, and sets it up with a core set of software. (Some new hires get a loaner computer while a new machine is ordered and prepared for them.) They'll buy you a new one every three years, if you're good. Even though ITSD (Information Technology Services Department) is responsible for installing important things like Office and antivirus software for all, it's up to each new member of staff to set their system up the way they want. For science-related uses, most new Institute machines are Macs, so this guide will assume that's what you have.

If you experience issues, you should ask your trainer or ITSD. To get help from ITSD, visit the ITSD Service Portal at https://stsci.service-now.com/itsd. After you log in, you can search the page for an answer to your problem or you can submit a ticket by clicking on "Something is Broken".

(There are *external* help desks too, https://stsci.service-now.com/hst (HST) and https://stsci.service-now.com/jwst (JWST). For IT issues, you want the internal one. The external helpdesk is for science/instrument support. It is a way for astronomers to ask questions about things like the archive, SSB software, data characteristics, instrument information and the like.)

You should now have a computer, an ActiveDirectory (AD) username, and a password from ITSD. Let's get started.

Configuring your email
=======================

Space Telescope uses Microsoft Exchange for email. Web-based access is available at https://mail.stsci.edu/. For daily use, you should set up a mail client like Outlook on your computer.

ITSD maintains some `guides for common mail clients <https://stsci.service-now.com/itsd?id=kb_article&sys_id=fe398bcddb96360042685434ce961981>`_.

Subscribe to mailing lists
===========================

Subscribe to ``sci_tech`` and ``tips_announce`` through the Outlook Web Access interface at http://mail.stsci.edu/. Log in with your AD username and password. The way to subscribe to lists is well hidden; you must log in, choose "Options", then "See all options", select "Groups" from the sidebar, click "Join"  under "Public Groups I Belong To". In the window that pops open, search for the mailing list name and click "Join".

You should already be subscribed to ``ins_staff``, ``ins_aura``, ``ins_riab`` (if appropriate), and ``ins_tech_staff`` (if appropriate).

There will probably be other mailing lists for your instrument team, but you will need to be added to those by the team lead. Be sure to ask your team lead whether they need to add you to any lists.

The lists ``pylunch``, ``python-interested`` and ``macx_users`` can also be subscribed to in the same way. ITSD also provides `more information on Exchange <https://stsci.service-now.com/itsd?id=kb_article&sys_id=f6d24767db954740591e79fdae961945>`_, if you're interested.

Adding a printer
=================

Choose a printer near your office from `this list of printers <https://stsci.service-now.com/itsd?id=kb_article&sys_id=1012a3cfdbbb36c0fb50f9baae961932>`_. There are `instructions for printer setup <https://stsci.service-now.com/itsd?id=kb_article&sys_id=5f867c29dbb3fe80fb50f9baae961974>`_ for different operating systems. The one you want is "Adding a Printer in Mac OS X".

Disable autocorrect (optional)
==============================

Since Mac OS X 10.10, smartphone-style autocorrect is standard in text fields throughout the OS. This is perhaps more useful in theory than in practice, especially when typing a lot of jargon that is not in the OS dictionary.

To disable it, go to the Apple menu at the top left of your screen and open System Preferences. Choose "Keyboard", then the "Text" tab within that pane, and uncheck "Correct spelling automatically". Close System Preferences, and the annoyance should be resolved.

Verify network mounts
======================

New computers set up by ITSD automatically connect certain folders to servers on the Institute network. These are called "Central Storage", and you will use them to exchange large files with coworkers and to make files from your personal machine available on the back-room servers.

Open a terminal and check that you can list the contents of the ``/grp/hst``, ``/grp/jwst``, and ``/user`` directories, as shown::

    $ ls /grp/hst
    HST_Arch_Proj acs_testing   etc           nicmos        tac           wfc3c         wfc3i
    OTA           adrizzle      etcrlbkup     prd           telemetry     wfc3d         wfc3j
    acs           cdbs          fgs           pyetc         usersupport   wfc3e         wfc3k
    acs2          cos           frc           ssb           wasapsb       wfc3f         wfc3l
    acs3          cos2          frontier1     stis          wfc3a         wfc3g         wfpc2
    acs4          cos3          frontier2     synphot       wfc3b         wfc3h

(If, instead, you see something like this... ::

    $ ls /grp/hst
    ls: /grp/hst: No such file or directory

... then you need to talk to ITSD.)

Setting up your own Central Storage directory
==============================================

Users can store files under their username at ``/user/myusername``. This is useful for sharing large files with your colleagues. In fact, you'll be using your Central Storage directory to send your training exercises to your trainers later on.

.. admonition:: Exercise
   :class: note

   Verify that your Central Storage directory exists with an ``ls /user/myusername`` (where you replace ``myusername`` with your username). If you get a "not found" or "permission denied" error, you will have to get in touch with ITSD.

If you're unfamiliar with UNIX file permissions, now is a good time to review them.

While at STScI, you may use proprietary science data in your analyses that should not be shared outside your team. Your Central Store directory is, by default, readable by other users in the institute. This, believe it or not, is not a mistake! This choice makes it easy to use to share large files with your colleagues, but must be kept in mind when handling sensitive data.

If you have data you don't wish others to see, you must be sure to set the permissions appropriately on the directory with the data. Files and folders can be assigned read, write, and execute permissions that apply to the owning user, owning group, and others. (The owning user and group are set when the file or directory is created; use ``ls -l FILE_OR_DIRECTORY_NAME`` to see what they're set to: owning user in the 3rd column, owning group in the 4th.)

The command to change permissions is ``chmod``, and it takes the form of ``chmod PERMS FILE_OR_DIRECTORY``. The ``PERMS`` string can be built up from the options in the table below.

+----------------+-------+-------+---------+
|                | Read  | Write | Execute |
+================+=======+=======+=========+
|           User | u=r   | u=w   | u=x     |
+----------------+-------+-------+---------+
|          Group | g=r   | g=w   | g=x     |
+----------------+-------+-------+---------+
|  Other / World | o=r   | o=w   | o=x     |
+----------------+-------+-------+---------+

For example, if you want a file to be readable and writable by yourself, only readable by people in your group, and completely inaccessible others, you would use ``chmod u=rw,g=r,o= myfile.txt``. Make sure your ``u=rw,g=r,o=`` string has no spaces in it, or it'll get interpreted as part of the next argument! Also, note how we used ``o=`` to **clear** the permissions. Omitting ``o=`` from the list would tell chmod to leave whatever permissions were already there [#umask]_.

If you have a directory full of files whose permissions you want to change, use the ``-R`` command. For example, to recursively change the permissions on a folder ``myfolder/`` and files ``myfolder/a.fits`` and ``myfolder/b.fits``, you would use this command: ``chmod -R u=rw,g=r,o= myfolder``.

**Note:** the "execute" permission should only be set for programs (and scripts) with one major exception: for **directories**, the "execute" permission means "can use files from"... so even if you cannot read the list of files in the directory, if you know the name of a particular file with world-readable access and the "execute" permission is available to you on the directory, you can still open the file. This is kind of subtle, so check out `this StackOverflow thread <http://unix.stackexchange.com/questions/21251/how-do-directory-permissions-in-linux-work>`_ for additional background.

.. admonition:: Exercise
   :class: note

   Make a subdirectory of your ``/user/myusername`` directory called ``private`` and make it usable only by you.

   Use ``ls -l`` to verify the permissions and ownership are what you expect. If you're not sure, ask your trainer to try and read a file in your new private directory!

Setting up a text editor
========================

Some people have a preference for a text editor for programming like ``vim`` or ``emacs``. For everyone else, TextWrangler is installed on your Institute machine already, and is a good starting point.

.. figure:: figures/computer_setup/textwrangler_icon.png
   :alt: The TextWrangler icon.

   The TextWrangler icon.

The first step is to open up TextWrangler by double-clicking the icon in your Applications folder. Once you've done that, select the "Install Command Line Tools..." option from the main menu as shown.

.. figure:: figures/computer_setup/textwrangler_install_command_line_tools_menu.png
   :alt: The menu showing the "Install Command Line Tools..." option

   The menu showing the "Install Command Line Tools..." option.

Choose to install the command line tools, as shown. You will be prompted for your password a couple of times.

.. figure:: figures/computer_setup/textwrangler_install_command_line_tools_prompt.png
   :alt: Dialog box asking you to confirm that you want to install the command line tools.

   Dialog box asking you to confirm that you want to install the command line tools.

Once they've installed, you should see a window like this one:

.. figure:: figures/computer_setup/textwrangler_install_command_line_tools_success.png
   :alt: Dialog box for successful installation.

   Dialog box for successful installation.

These steps make a new command, ``edit``, available in your terminal.

Quit TextWrangler, then open a new terminal window and make sure TextWrangler appears when you use the edit command (e.g. ``edit myfile.txt``).

.. _computer_setup_environment:

Configuring STScI-specific environment variables
=================================================

A lot of tools developed within STScI assume the existence of certain environment variables that point to data on servers within the Institute. The default shell for new computers at the Institute is ``tcsh``, however you will want to change this to ``bash``. To do so, you have to do a couple things.

In the terminal, change your shell with the following command::

    chsh -s /bin/bash

Close your terminal, and open a new one to finalize this change.

Now, you need to set the environment variables in the file ``.bash_profile`` in your home directory. This file probably does not exist so you will have to create it.

Open (or create) ``.bash_profile`` with the following command::

   edit ~/.bash_profile

.. tip::

   Files starting with a ``.`` are hidden in the Finder, so it's often easier to open them from the command line.

Here is an example ``.bash_profile`` that you can copy and paste into yours::

    # Paths and stuff for accessing CDBS stuff
    # For WFC3
    export iref="/grp/hst/cdbs/iref/"

    # For ACS
    export jref="/grp/hst/cdbs/jref/"
    export jtab="/grp/hst/cdbs/jtab/"

    # For COS
    export lref="/grp/hst/cdbs/lref/"

    # For STIS
    export oref="/grp/hst/cdbs/oref/"

    # Set a default editor
    # If you prefer another editor, change the export EDITOR and VISUAL lines accordingly.
    export EDITOR=edit
    export VISUAL=edit

    # Pysynphot
    export PYSYN_CDBS="/grp/hst/cdbs/"

As you may have guessed, setting variables in ``bash`` takes the form of ``export NAMEOFVAR="/value/for/var"``. You should set all of these variables, even if you are not on one of the listed instrument teams, as later training exercises will depend on them being set.

It is not obvious, but the trailing slash in the $oref definition is required for CALSTIS to function properly.  Be sure not to leave it off.

To apply these changes, save the file and typing the following into the command line::

    source ~/.bash_profile

To check that your changes have taken effect, open a **new terminal window** and type ``echo $oref``. You should see the value for ``oref`` from above printed out in the terminal.

There are a few different files that can be executed when opening a new terminal, depending on arcane details everyone would rather ignore [#bashrc]_. To make sure your ``.bash_profile`` file gets sourced no matter how ``bash`` is started, it is necessary to make a ``.bashrc`` file that simply loads the contents of ``.bash_profile``. This is what that would look like::

    if [ -f ~/.bash_profile ]; then
       source ~/.bash_profile
    fi

Save that in ``.bashrc`` and shed a single tear for the ineffable complexity of the UNIX.

.. tip::

   If you prefer another editor, change the ``export EDITOR`` and ``VISUAL`` lines accordingly.

.. _git_configuration:

Configure the git version control tool
======================================

We will use git in the :doc:`version_control` module later on, but let's take the opportunity now to tell it your name and email address. These will be used by git to identify who changed particular versions of the code. Run the commands below, updating them with your own name and work email address::

   git config --global user.name "Name of Hire"
   git config --global user.email "nhire@stsci.edu"

It's also a good idea to tell it about your preferred text editor (here we use ``edit``, as an alias to TextWrangler), which git will sometimes open for you when it wants you to describe your changes. ::

   git config --global core.editor "edit"

.. _installing-conda:

Installing Conda
================

The Institute's Science Software Branch currently distributes a package that contains some essentials for scientific computing for astronomy, and we are now switching over to Conda (as the direct successor to Ureka, the previous Institute software package system). As a result, here we will step through installing Conda and setting up your own environments with the necessary packages. One of the main reasons we recommend this is because of Python 2.7 and Python 3.5 (the most recent version of Python) and the differences between them. We discuss this further in the Python module of the training, however since we are working with both Python 2.7 and Python 3+ code at the Institute, it is beneficial to set up environments for both.

.. note::

    We herein follow along with the SSB-recommended method for installing AstroConda, found here: `AstroConda Installation <http://astroconda.readthedocs.io/en/latest/installation.html>`_. We will make some small deviations from the instructions found there, but the result is no different.

Getting started, we must install Conda from ``bash``. If you changed your shell to bash as described in :ref:`computer_setup_environment`, that should be what you get when you open a new terminal window. Open one now, and download the Miniconda3 installer with the following command::

   curl -OL https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh

You should now have a file named "Miniconda3-latest-MacOSX-x86_64.sh" in your home directory. To install it::

   bash Miniconda3-latest-MacOSX-x86_64.sh

Follow the instructions as prompted. Accept the default options to install in your home directory. Now miniconda is installed!

Conda is available in a bunch of flavors ("Ana-" and "mini-", Python 2 and Python 3), but ultimately they do the same things. We will create an AstroConda environment for Python 2.7, which you may need for older scripts and testing, and an environment for Python 3.5 with the latest version of the language and associated packages.

If you want a detailed introduction on how to use Conda, you can check out the `Conda test drive <http://conda.pydata.org/docs/test-drive.html>`_ which will guide you step-by-step through some of what Conda can do. If instead, you are on board for a quick environment setup you can follow along here.

Close that window, and open a new terminal. Check to make sure your terminal can see the Conda command::

   conda

This should show some usage instructions. If you get a message that the command is not found, *talk to your buddy/trainer*.

.. _astroconda-setup:

AstroConda setup
----------------

With Anaconda, we get to install all our own programs and packages. We want to use the Institute's AstroConda repository as it includes most of the packages people at the institute will need for their functional work and research. But, we need to tell Anaconda to do this::

    conda config --add channels http://ssb.stsci.edu/astroconda

We can now checkout our current environment(s) and add some new ones. First, to see the list of environments::

    conda info --envs

Or::

    conda env list

You should only see your root environment. For reasons that are a little confusing, we don't want to use our ``root`` environment to do all our work, so let's create a new environment that will be our main environment that runs Python 3.5. The command takes a name and a list of packages to install. The ``stsci`` package pulls in everything else, and we also want to make sure the Jupyter Notebook gets installed, so the command becomes::

    conda create --name astroconda python=3.5 stsci notebook

We have called this environment ``astroconda`` because we are installing the main AstroConda packages into it, but you can call this environment whatever you want. This repository includes are your usual Python friends (NumPy, Astropy, matplotlib, etc.) and also makes sure that you have IPython, Jupyter Notebook, and additional Institute-specific Python packages. We can activate this environment and check to see exactly which packages have been added::

    source activate astroconda
    conda list

To check the version of Python, type::

    python --version

Some people and systems within the Institute have not upgraded to Python 3.5 yet. When running older code, it helps to have a Python 2.7 environment available, so let's create one. Here we've added IRAF and PyRAF to the package list for installation, as well. (Hopefully, they will soon be retired.) ::

   conda create --name astroconda27 python=2.7 stsci iraf pyraf notebook

.. note::

    It's impractical to keep the exact same set of extra packages in all your environments, so it's best to just pick one that you will use more often and use other environments for specific tasks.

Lastly, we need to know how to add more packages (and delete them) in the future. The following is how you can do this from ``root`` or a different environment. If you are in the environment you are changing (that is, you have done ``source activate [name of environment]`` already in that terminal), you do not need the ``--name [name of environment]`` part::

    conda install --name [name of environment] [name of package]
    conda remove --name [name of environment] [name of package]

If you decide that you don't like/need an environment, you can delete it! ::

    conda remove --name [name of environment] --all

.. note::

    For more information on dealing with Conda and playing with environments, check out the `Conda page <http://conda.pydata.org/docs/index.html>`_ .

.. warning::

    Astroconda is a set of packages that replaces Ureka, which was one big honking package containing everything and the kitchen sink. You may encounter Ureka, or hear about "SSBx", "SSBdev", and "SSBrel" environments (which were specific Ureka environments, now deprecated). However, you should use conda with Astroconda since Ureka is no longer being updated.

Using your conda environments
-----------------------------

When you open a new terminal, the Conda system implicitly puts you in a "root" environment. This is rarely the environment you want to use for scientific computing. (In fact, installing STScI packages into the root environment is not supported.) So, before you run your scripts, you must be sure to activate the appropriate environment!

For Python 3.5, this looks like::

   $ source activate astroconda

For older scripts that need Python 2.7 (or anything that needs PyRAF)::

   $ source activate astroconda27

.. tip::

   If you don't want to do this every time you open a terminal, you can add the appropriate line to the end of your ``.bash_profile``.

Verify IDL is installed
========================

IDL should be pre-installed on new Institute machines. To check, open a terminal window and type ``idl``. You should see something like this::

   $ idl
   IDL Version 8.4, Mac OS X (darwin x86_64 m64). (c) 2013, Exelis Visual Information Solutions, Inc.
   Installation number: 90853.
   Licensed for use by: Space Telescope

   IDL>

If not, contact computer support.

Make sure you can log in to Cisco Jabber
=========================================

Cisco Jabber should already be installed on your machine. (Contact ITSD if it's not.) Open the Cisco Jabber application and sign in with your AD username and password. Cisco Jabber connects with your calendar and phone, and will tell you if the person you're trying to message is in a meeting or does not want to be disturbed. You can also set it up to receive calls through your computer (for example, for teleworking).

ITSD maintains a guide with more information `in their Service Portal <https://stsci.service-now.com/itsd?id=kb_article&sys_id=8910c248db6a47040c0a5595ce9619a9>`_.

.. _confluence-intro:

Log in to the Confluence wiki
==============================

Log in to the Confluence wiki at https://confluence.stsci.edu/ using your AD credentials.

Visit the `New hire training <https://confluence.stsci.edu/display/INSTraining/New+hire+training>`_ page, and select the appropriate schedule from the links there (e.g. "New hire training for technical staff (February 2017)" if that is the most recent).

On that page, there is a "Watch" link in the upper right corner below the blue title bar. Click that so that you will receive an email if there are last-minute updates to the schedule (for example, if someone has to reschedule their lecture).

If you are in the Research and Instrument Analysis Branch, you should also bookmark the `INS Technical Staff wiki page <https://confluence.stsci.edu/display/IDWP/INS+Technical+Staff>`_.

Log in to a server
==================

The Institute has a whole herd of (mostly) Linux servers sitting in the server room downstairs. If you have a long-running task that you don't want to interrupt by taking your laptop home or rebooting your desktop, you should use a back-room server to run your analysis.

The command to remotely connect to a server is ``ssh SERVERNAME`` (e.g. ``ssh plhstins1`` or ``ssh science1``). It will attempt to log you in with your current username and prompt you for your password. This is the same password you use to unlock your computer. To enable X forwarding you can use the ``-XY`` option (e.g. ``ssh -XY plhstins1``). This allows for displays that use X (which is Linux's default backend) to be forwarded to your monitor.

Any commands you run in an ssh session will execute on the server, not on your personal computer. This means any data you need should be copied to a Central Store directory so that the server can see it.

.. admonition:: Exercise
   :class: note

   Log into one of the servers named below using ``ssh``. Using your laptop or desktop, save a text file in your Central Storage directory (e.g. ``/user/myname/temp.txt``). Within your SSH session, verify that you can read it from the server you chose (e.g. ``cat /user/myname/temp.txt``).

   +------------------+----------------------------+
   | Server hostname  | Use                        |
   +==================+============================+
   | plhstins1        | INS HST functional work    |
   +------------------+----------------------------+
   | plhstins2        | INS HST functional work    |
   +------------------+----------------------------+
   | plhstins3        | INS HST functional work    |
   +------------------+----------------------------+
   | witserv1         | INS JWST functional work   |
   +------------------+----------------------------+
   | witserv2         | INS JWST functional work   |
   +------------------+----------------------------+
   | witserv3         | INS JWST functional work   |
   +------------------+----------------------------+
   | science1         | Science / research use     |
   +------------------+----------------------------+
   | science3         | Science / research use     |
   +------------------+----------------------------+
   | science4         | Science / research use     |
   +------------------+----------------------------+
   | science5         | Science / research use     |
   +------------------+----------------------------+
   | science6         | Science / research use     |
   +------------------+----------------------------+
   | plscigpu1        | GPU computing              |
   +------------------+----------------------------+
   | plscigpu2        | GPU computing              |
   +------------------+----------------------------+

Installing conda again
----------------------

What's this? Installing conda *again*? That's right, it's so much fun we have you do it twice.

That's actually not the reason why. The servers at STScI run Linux (for the most part) and will not be able to run the Mac version of Anaconda you installed earlier. Besides, that version is installed to your local laptop or desktop disk, so it wouldn't be accessible to programs running on the servers at STScI. To use conda for your server computing needs, you need to set it up on one of the servers separately. (Fortunately, you only have to go through the process on **one** Linux server to make conda available on **all** the Linux servers.)

One important consequence of this is that you will be responsible for installing the same things into both environments. Running ``conda install mypackage`` on your laptop or desktop will not automatically make it available when you ssh to ``plhstins1`` or similar.

All the servers have network-mounted home directories (i.e. ``/home/myname``) and access to the Central Store (i.e. ``/user/myname``). Conda wants to install in the home directory by default, but there is less free space in your home directory than on Central Store. Therefore, we will explain how to install to your Central Store directory instead.

First, ssh in to one of the servers mentioned in the previous exercise::

   $ ssh plhstins1
   plhstins1>

By default, these servers run ``tcsh`` (not ``bash``) when you log in. Start a ``bash`` shell::

   plhstins1> bash
   bash$

Change directories to your Central Store directory::

   bash$ cd "/user/$(logname)"

Download and install the latest Miniconda for Linux using ``curl``::

   bash$ curl -OL https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh
   bash$ bash Miniconda3-latest-Linux-x86_64.sh -b -p "/user/$(logname)/miniconda3"

It'll run for a little bit and output a message when it finishes.

The ``.bashrc`` and ``.bash_profile`` files you made earlier for your personal computer have counterparts on the servers. We have to add your miniconda folder to the ``$PATH`` on the server for the ``conda`` command to work. ::

   bash$ echo "export PATH=\"/user/$(logname)/miniconda3/bin:\$PATH\"" >> ~/.bashrc

There are lines in the default ``.bash_profile`` that comes with your account ensuring your ``.bashrc`` gets loaded, so you shouldn't need to edit ``.bash_profile`` at all.

Log out and ssh to the server again::

   bash$ exit
   plhstins1> exit
   logout
   Connection to plhstins1.stsci.edu closed.
   $ ssh plhstins1
   plhstins1>

The ``conda`` command works with ``bash``, not ``tcsh``. So, before you continue, start a bash shell on the server you chose::

   plhstins1> bash
   bash$

Then check that the ``conda`` command is available::

   bash$ which conda
   /user/myname/miniconda3/bin/conda

Now that you have the ``conda`` command available, follow the :ref:`astroconda-setup` instructions again on the server.

.. tip::

   You can have ITSD change your default shell to ``bash`` on the Linux servers. Just submit a ticket through the `ITSD Service Portal <https://stsci.service-now.com/itsd>`_ with your request. If you opt to stick with the default (tcsh), remember you must start ``bash`` after sshing to the server before the ``conda`` command will be available.

The ``screen`` utility
----------------------

One tool that makes working with back-room servers way more flexible is ``screen``. The ``screen`` utility lets you **detach** from a running session, go away (shut down your computer, disconnect, whatever), and then **reattach** to it later.

Here's a possible scenario: Jane wants to leave on Friday, but needs to run her ``calibrate_everything.py`` script that takes 12 hours to complete. First, she connects to a server with ``ssh``::

   janecomputer:~ janeuser$ ssh science1
   The authenticity of host 'science1 (130.167.200.161)' can't be established.
   RSA key fingerprint is 5e:21:0f:02:d9:23:16:7c:a8:28:a7:1b:c3:60:2f:81.
   Are you sure you want to continue connecting (yes/no)? yes
   Warning: Permanently added 'science1,130.167.200.161' (RSA) to the list of known hosts.
   Password:

      ****************************************************************************
      * This US Government system is for authorized users only. By accessing   *
      * this system you are consenting to complete monitoring with no            *
      * expectation of privacy. Unauthorized access or use may subject you to    *
      * disciplinary action and criminal prosecution                             *
      ****************************************************************************

   science1>

Then she starts a ``screen`` session and gives it the name ``mylongjob``::

   science1> screen -S mylongjob

The terminal window clears and the prompt is redisplayed at the top. She changes to the appropriate directory and runs her script::

   science1> source activate astroconda
   (astroconda)science1> python calibrate_everything.py
   Working...

While it's running, she uses a magic key combination to detach the screen session: :kbd:`Ctrl-a` and then :kbd:`d`. The script output disappears and she's left with::

   science1> screen
   [detached]
   science1>

On Monday, she connects to ``science1`` via ``ssh`` as before, but she can't remember what she named the screen session so she runs::

   science1> screen -ls
   There are screens on:
       28724.mylongjob    (Detached)
   1 Socket in /var/run/screen/S-janeuser

Then she re-attaches to the screen session with::

   science1> screen -r mylongjob

which clears the current terminal output and shows her the tail end of her script's output::

   (astroconda)science1> python calibrate_everything.py
   Working...
   Calibrating Hubble... DONE
   Calibrating JWST... DONE
   Calibrating WFIRST... DONE
   (astroconda)science1>

Note that there's nothing special about the command finishing before she re-attached. She could have just as easily checked in on it while it was in progress over the weekend, but she was busy having fun. Since everything's done, she decides that instead of detaching again, she will just exit ``screen``::

   (astroconda)science1> exit
   [screen is terminating]
   science1>

If she didn't ``exit``, that session would remain active (and she could reattach to it later).

.. admonition:: Exercise
   :class: note

   Log into one of the servers named in the previous exercise and start a ``screen`` session. Detach from it, close your terminal, and make sure you can reconnect and reattach to it successfully.

Screen allows multiplexing of the terminal into multiple shells.  This means that one can have multiple emulated terminals available within one session (e.g. over one SSH connection).  To create a new shell session within screen, type :kbd:`Ctrl-a` :kbd:`c` (create).  To close a session, simply ``exit`` the shell.  In order to swap between different shells, type :kbd:`Ctrl-a` :kbd:`#` (where # is the number of the shell session).  A handy shortcut to swap between the two most recently accessed shells is :kbd:`Ctrl-a` :kbd:`Ctrl-a`.

A server's screen session can be customized in the ``~/.screenrc`` configuration file.  A useful setup that includes a lower status bar labelling the multiplexed shells is::

   shell -$SHELL
   defscrollback 10000
   termcapinfo xterm-256color ti@:te@
   caption always "%?%F%{-b bc}%:%{-b bb}%?%C|%D|%M %d|%H%?%F%{+u wb}%? %L=%-Lw%45>%{+b by}%n%f*%t%{-}%+Lw%-0<"

If you want to use this, just copy these lines into a new ``.screenrc`` file under your home directory while connected to a server via ssh.

To scroll above the terminal window boundaries, use screen's copy mode:

 1. Enter copy mode:    :kbd:`Ctrl-a` :kbd:`[` or :kbd:`Ctrl-a` :kbd:`Esc`
 2. Scroll up:          :kbd:`Ctrl-u`
 3. Scroll down:        :kbd:`Ctrl-d`
 4. Exit copy mode:     :kbd:`]` or :kbd:`Esc`

Continuing your training
========================

Depending on when you start at STScI, this could go one of two ways:

1. If your start date at STScI lines up with the schedule in the most current "New hire training for technical staff" document on Confluence, that means you'll be following the schedule there. Every few months, the Instruments (INS) division is able to coordinate the start dates of a number of new hires such that training can take place in two weeks of lectures and workshops.

2. If your start date at STScI falls **falls in between** the schedules on Confluence, you will work through materials in this library on your own with the help of trainers who can answer questions. When the next large cohort of new hires starts, you will join them for the lectures you haven't attended yet. (There is no need to repeat material you already worked through.)

The other documents in this library explain useful tools with exercises interspersed with the text. Save the results of your exercises as you go; you will submit them to your trainer once you've completed the section. If you get stuck, you can always ask your trainer for help!

Wondering who the trainers are for a particular section? Check the schedule page you bookmarked in the :ref:`brief section on Confluence <confluence-intro>`. Other recent hires have also done this training, so they're a good resource for quick questions if your trainer is busy.

Additional resources
=====================

* The Institute maintains a list of approved software, which you should consult if you need something else for your machine: http://www.stsci.edu/institute/itsd/software

.. rubric:: Footnotes

.. [#umask] Files are created with a default set of permissions set by your "umask", which will most likely make them world-readable by default. See `this Wikipedia article <https://en.wikipedia.org/wiki/Umask>`_ if you're really curious.
.. [#bashrc] Said details are summarized in `this blog post from 2005 <http://www.joshstaiger.org/archives/2005/07/bash_profile_vs.html>`_. The gist of it is: ``.bashrc`` is run when starting an xterm or running ``bash`` within an already-started terminal session. ``.bash_profile`` is run for login shells (``bash -l`` or logging on via console or SSH). Yes, it's confusing. No, there isn't really a good reason it's this way.
