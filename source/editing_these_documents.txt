***********************
Editing These Documents
***********************

These documents live in a ``git`` repository, making it easy for you to modify them and share your changes with others. GitHub is the service we use to coordinate sharing and reviewing the changes. You can find the web interface to the repository at https://spacetelescope.github.io/training-library/.

.. warning::

   For now, the documents are at https://github.com/spacetelescope/training-library, and you need someone to add you as a collaborator before you can access them. Follow the instructions in :ref:`getting_started_github` and ask someone to add you as a collaborator.

.. _making_and_previewing_changes:

Making and previewing changes
=============================

The first step to making a change is to clone the repository, giving you a local copy to work with. You can do this is two ways::

   git clone https://github.com/spacetelescope/training-library.git

Or if you have an ssh key for GitHub set up (see :ref:`git-push-ssh`)::

   git clone spacetelescope/training-library.git

This creates a ``riatraining`` directory in whatever folder you're in. The web pages you're reading now are automatically generated from the ``.txt`` files in the ``source`` subdirectory. To generate them on your computer, you need to install required packages from ``requirements.txt``::

   cd riatraining/
   pip install -r requirements.txt

This installs the program that builds the web pages from the source files, as well as components it depends on. To make a change, edit the ``.txt`` or ``.tex`` source for the document and then run::

   make riadocs

This builds HTML files for the webpages, as well as PDFs for those documents written in LaTeX. The generated HTML for the webpages is now in ``build/html/``. You can open ``build/html/index.html`` (or another file) to see your handiwork.

See :ref:`publishing_changes` for how to incorporate your changes in the published version.

.. _autobuilder:

A simpler workflow
------------------

There's a helper script that will rebuild (``make riadocs``) the pages every time you edit and save a file. Run ``python autobuilder.py`` from your terminal, and a browser window will pop open pointing to a local preview copy at http://127.0.0.1:8000/.

While the autobuilder is running, any changes to ``.txt`` files will trigger a rebuild when you save them. Make your edits, save, and refresh the page in your browser to see your changes.

Quit the autobuilder by interrupting it with :kbd:`Control-c`.

Changing an existing document
=============================

Recall from :doc:`version_control` that it's a good idea to make changes on a separate branch. Make a new branch with a descriptive name, like ``durbin-matplotlib-edits`` or ``fix-setup-typo``. (See :ref:`version_control_branching` for a refresher.)

Edit the ``.txt`` source file (found in the ``source/`` directory) corresponding to the page you want to change. For formatting syntax tips, see :ref:`rest_primer` at the end of this document.

Verify your changes worked using either the :ref:`autobuilder script <autobuilder>` or ``make html`` followed by opening the HTML file produced. Once you're satisfied, commit the changes to your branch. (See :ref:`version_control_committing` for a refresher.)

Lastly, push your commits to a new branch on the origin repository. (``git push origin your-branchname``)

Making a pull request on GitHub
-------------------------------

GitHub would not stop you from merging your own edits, but it is considered good practice to give other collaborators a chance to review your changes.

Once you have pushed to a new branch, when you visit https://github.com/spacetelescope/training-library you will see a new green icon to "Compare & pull request".

.. figure:: figures/compare_and_pull_request.png
   :alt: GitHub's button for "Compare & pull request"

Click the big green "Compare & pull request" button.

At the bottom of the page, you'll see the changes you're asking to pull in. Ensure you're only pulling in changes you mean to!

.. figure:: figures/pull_request_files.png
   :scale: 50 %
   :alt: View of the changes in the pull request diff

.. warning::

   If you see a message saying that the branches cannot be automatically merged, you need to "pull in upstream changes". All that means is that someone else edited the same thing as you, and you need to incorporate their changes in your pull request.

   To do this, go to your repository in the terminal and execute ``git pull`` and ``git merge master``. You will see a message about which files have conflicts. Open them in your editor, look for the ``<<<<<<`` and ``>>>>>>`` markers, and combine the changes in a way that makes sense (e.g. include your name *and* that of another trainee that just added theirs).

   Add, commit, push to your branch, and your pull request should gain the green "Able to merge" icon!

Give your pull request a brief title (e.g. "Updates to Computer Setup to fix X, Y, and Z") and description, then click "Create pull request." Ask one of the trainers to review your changes, and if it all looks good, they can merge it in.

If they recommend revisions, simply follow the above instructions to edit, add, commit, and push again. New commits on the same branch will automatically show up in your pull request.

Once it is merged, either you or they can publish it using the directions in :ref:`publishing_changes`.

Creating an entirely new document
=================================

1. Add a new ``.txt`` file under ``source/``

   Begin your document with a heading. This is the title that will show up it is linked to. For example::

      ***********************
      Editing These Documents
      ***********************


2. Add the base name of the file to ``index.txt``

   There are two places in ``index.txt`` where you must add the base name of your document (e.g. for ``python.txt``, the base name is ``python``). First, include a link to it in the numbered lists like this::

      #. :doc:`base_name`

   Second, include a link in the sidebar by adding it under the ``toctree`` at the end of ``index.txt``::

      .. toctree::
         :maxdepth: 2
         :hidden:

         [ ... ]
         base_name
         [ ... ]

3. Be sure to ``git add`` your new ``.txt`` file so git will track it

4. Commit, push, and pull request just as you would editing an existing document

.. _publishing_changes:

Publishing changes
==================

This training site is set up using GitHub Pages, a service of GitHub that hosts static web pages for free. The way you add things to GitHub Pages is through a specially named branch called ``gh-pages`` in this repository.

To simplify copying the built HTML pages from one branch to another, there is a target in the Makefile called ``gh-pages``. To use it, make sure you have no uncommitted changes on ``master`` and do::

   $ make gh-pages

That will build the latest copy of the docs, copy them to the ``gh-pages`` branch, commit them, and push them to the origin's ``gh-pages`` branch. Within 5-10 minutes, you should see your changes online at https://spacetelescope.github.io/training-library/.

.. warning::

   If the build fails partway through, you will have to make ``git`` happy again yourself. That means unstaging everything, removing everything but the ``.git`` directory, and running ``git checkout master`` before you can try to build again. (It's kind of a pain, but you shouldn't typically encounter this.)

.. _rest_primer:

Writing with reST
=================

The training documents are formatted in *reST* (reStructuredText). reST is a markup language (like e.g. LaTeX), meaning that there are "source" files and a program that "compiles" them into pages with your formatting applied.

Writing with reST (reStructuredText) is a lot like writing a plain-text email. Bullet points are just asterisks at the beginning of a line, emphasis is accomplished by putting asterisks on either side of a word, and so forth. If you're not sure how some formatting was achieved in these documents, just have a look at the ``.txt`` source file for that document!

Here are some very common patterns for quick reference:

+-----------------------------------+-------------------------------------------------------------+
|Type of formatting                 | Example code                                                |
+===================================+=============================================================+
| Bold                              | |  ``**bold text**``                                        |
+-----------------------------------+-------------------------------------------------------------+
| Italic/emphasis                   | | ``*emphasized text*``                                     |
+-----------------------------------+-------------------------------------------------------------+
| Chapter heading                   | | ``*****************``                                     |
|                                   | | ``Chapter Heading``                                       |
|                                   | | ``*****************``                                     |
+-----------------------------------+-------------------------------------------------------------+
| Section heading                   | | ``Section Heading``                                       |
|                                   | | ``=================``                                     |
+-----------------------------------+-------------------------------------------------------------+
| Link to another training document | | ``:doc:`filename_without_extension```                     |
+-----------------------------------+-------------------------------------------------------------+
| Link to a section heading         | At the heading you want to link to:                         |
|                                   |                                                             |
|                                   | | ``.. _your_reference_name:``                              |
|                                   | |                                                           |
|                                   | | ``Section Heading``                                       |
|                                   | | ``=================``                                     |
|                                   |                                                             |
|                                   | For the link itself:                                        |
|                                   |                                                             |
|                                   | | ``:ref:`link text <your_reference_name>```                |
+-----------------------------------+-------------------------------------------------------------+
| Link to a web page                | | ```text of link <http://example.com/>`_``                 |
+-----------------------------------+-------------------------------------------------------------+

You can also insert an exercise prompt with this code::

   .. admonition:: Exercise
      :class: note

      Indent your exercise instructions with three spaces, and
      leave a blank line after the ``admonition`` line but
      before the instructions

Which would look like this:

.. admonition:: Exercise
   :class: note

   Indent your exercise instructions with three spaces, and leave a blank line
   after the ``admonition`` line but before the instructions

To include a code listing (e.g. a snippet of python or terminal output), use the ``::`` marker at the end of the preceding paragraph, as in the following example::


   Blah blah preceding paragraph or sentence. Now refer to this code::

      if __name__ == "__main__":
          app = Application()
          app.run()

   Continuing prose description following after a blank line.


Which would look like this:

--------------------------------------------

Blah blah preceding paragraph or sentence. Now refer to this code::

   if __name__ == "__main__":
       app = Application()
       app.run()

Continuing prose description following after a blank line.

--------------------------------------------

For more advanced formatting information, there's a very good `syntax quickstart guide <http://sphinx-doc.org/rest.html>`_ maintained by the Sphinx project.
