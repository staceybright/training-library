\chapter{Pyraf}
\label{ch:pyraf}
%%\thispagestyle{empty}

 
%%\newpage
 
\section{PyRAF Introduction}

Pyraf is basically IRAF that has been rewritten in the python
programming languag.  One of the main motivations for creating PyRAF
is to create a version of IRAF that is compatible with a programming
language other than CL. CL has many short comings which are more and
more apparent in more complicated programs.

PyRAF has its own IDE.  To start it, just type `pyraf' in a terminal.
This should look familear to you if you know IRAF.  Type `.exti' to
exit.  The remainding part of this chapter will have you import pyraf
into python unless otherwise stated. 

\section{A PyRAF Example with DAOFIND}

Again, create a file in your script directory, and open it in your
favorite editor.  Add your header.  For your 'ABOUT' section, we will
be creating a script showing how python can be used to execute
IRAF/PyRAF tasks. The data comes from the \emph{NICMOS} instrument and is
located on central storage.

Import the pyraf module and from within that module import the iraf
instance.  The code for importing these functions looks like this:

\#Load the packages we need  \\
import pyraf  \\
from pyraf import iraf

As you can infer `iraf' is something that lives inside of `pyraf'.
For example, if you want to run \textsc{phot} on some files
you need to create a list of coordinates.  To do this we will use
\textsc{daofind}.  Since \textsc{daofind} is an iraf module, we
exidute it using dot notation, like this:

iraf.daofind(parameter1,parameter2,parameter3) 

The parameters for a PyRAF task executed in the python environment are
the same as they would be in the PyRAF environment. Pull up a PyRAF
window and open the help file to see what the parameters for \textsc{daofind}
are. Now are going to run \textsc{daofind} on one file in our
directory - n94j06okq\_cal.fits.

\#Run daofind on one image  \\
iraf.daofind(image='n94j06okq\_cal.fits[1]')  \\

The ``[1]'' is for extension `1'.  You should be prompted for several
parameters, just hit `enter' to go through the defaults.  Type `ls' in
the directory where you ran this -- there should now be a file called
n94j06okq\_cal.fits1.coo.1. In PyRAF open up the file and look at the
output, then compare this with the image on DS9.  Did \textsc{daofind}
do a good job?  You can facilitate this process with the
\textsc{tvmark} task.

\termtab pyraf  \\
\pyraftab images  \\
\pyraftab !ds9 \& \\
\pyraftab display n94j06okq\_cal.fits[1] 1

The last '1' is for which DS9 frame to display in.

\pyraftab tv  \\
\pyraftab tvmark 1 n9vf01hfq\_ima.fits1.coo.1

The '1' is for the DS9 frame number.  We can see that we did not to
too well, but let's ignore that for now and work on our program.

Go ahead and run this program again, and you will see that it will
create a second file called n9vf01hfq\_ima.fits1.coo.2. What if we did
not want so many files and instead wanted to always write to
n9vf01hfq\_ima.fits1.coo.1?  IRAF might have a problem overwriting
this file, so a simple solution would be to remove it.  For this we
will need to import \textsc{os}.  Furthermore, if we don't want to have to
press `enter' at the prompt, we can add to our program the extra
parameters it is looking for.  Finally, let's write this program so
that we can run the process on multiple files.  For that we will
import \textsc{glob}.

Here is what I have:

\#Load the packages we need  \\
import pyraf, os, glob  \\
from pyraf import iraf

\#Generate a list of all the fits files
\begin{tabbing}
  file\_list = glob.glob('*\_cal.fits') \\
  print file\_list \\
  \#Loops though all the .fits files \\
  for \= file in file\_list: \\
  \> \#Test for old files  \\
  \> file\_query = os.access(file + '1.coo.1', os.R\_OK)   \#Removes them if they exist  \\
  \> if file\=\_query == True: \\
  \> \> os.remove(file + '1.coo.1')  \\
  \> \#Run daofind on one image  \\
  \>  iraf.daofind(\textbackslash \\
  \> \> image = file + '[1]',\textbackslash  \\
  \> \> interactive = 'no',\textbackslash  \\
  \> \> verify = 'no')  \\
\end{tabbing}

Notice that I used to line continuation symbol ` \textbackslash '
to spread the command out over multiple lines.







